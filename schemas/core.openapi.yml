openapi: 3.0.3
info:
  title: Habit tracker
  version: 0.0.1
  description: Small projects for tracking habits
paths:
  /api/entries:
    get:
      operationId: entries_list
      description: Retrieve entries filtered by habit and date range.
      parameters:
      - in: query
        name: habitId
        schema:
          type: string
        description: Filter entries by the habit ID
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: timeEnd
        schema:
          type: string
        description: End date for filtering entries in ISO format. Defaults to the
          current time.
      - in: query
        name: timeStart
        schema:
          type: string
        description: Start date for filtering entries in ISO format. Defaults to 7
          days before `timeEnd`.
      tags:
      - entries
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEntryList'
          description: ''
    post:
      operationId: entries_create
      description: Create a new entry for a habit.
      tags:
      - entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Entry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Entry'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: ''
  /api/entries/{id}:
    get:
      operationId: entries_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - entries
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: entries_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - entries
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: entries_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - entries
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/habits:
    get:
      operationId: habits_list
      description: Retrieve a list of habits.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: userId
        schema:
          type: string
        description: Filter habits by the author's user ID.
      tags:
      - habits
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHabitList'
          description: ''
    post:
      operationId: habits_create
      description: Create a new habit.
      tags:
      - habits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Habit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Habit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Habit'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Habit'
          description: ''
  /api/habits/{id}/:
    get:
      operationId: habits_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - habits
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: habits_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - habits
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: habits_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - habits
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/token/:
    post:
      operationId: token_create
      description: Retrieve the token.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WrapperTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WrapperTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WrapperTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: Retrieve a new access token.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WrapperTokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WrapperTokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WrapperTokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/user/register/:
    post:
      operationId: user_register_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/whoami/:
    get:
      operationId: whoami_retrieve
      tags:
      - whoami
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CreateUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          maxLength: 128
      required:
      - password
      - username
    Entry:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        habit:
          type: integer
        date:
          type: string
          format: date-time
        rating:
          type: integer
          maximum: 10
          minimum: 0
          nullable: true
        description:
          type: string
          nullable: true
      required:
      - date
      - habit
      - id
    GoalTypeEnum:
      enum:
      - gt
      - gte
      - lt
      - lte
      - equal
      type: string
      description: |-
        * `gt` - Greater than
        * `gte` - Greater than or equal to
        * `lt` - Less than
        * `lte` - Less than or equal to
        * `equal` - Equal to
    Habit:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: integer
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        private:
          type: boolean
        status:
          $ref: '#/components/schemas/StatusEnum'
        goal:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        goalType:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GoalTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        goalTimespan:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        goalFrom:
          type: string
          format: date-time
          nullable: true
        goalTo:
          type: string
          format: date-time
          nullable: true
      required:
      - author
      - id
      - name
    NullEnum:
      enum:
      - null
    PaginatedEntryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
    PaginatedHabitList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Habit'
    StatusEnum:
      enum:
      - '0'
      - '1'
      - '2'
      type: string
      description: |-
        * `0` - Active
        * `1` - Paused
        * `2` - Deleted
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    WrapperTokenObtainPair:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
        password:
          type: string
          maxLength: 255
      required:
      - password
      - username
    WrapperTokenRefresh:
      type: object
      properties:
        refresh:
          type: string
          maxLength: 255
      required:
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
